{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://www.rubyschema.org/honeybadger.json",
  "title": "Honeybadger configuration",
  "type": "object",
  "definitions": {
    "erb": {
      "type": "string",
      "pattern": "^<%=.*%>$"
    },
    "constant": {
      "type": "string",
      "pattern": "^(?:::)?[A-Z][a-zA-Z0-9_]*(?:::[A-Z][a-zA-Z0-9_]*)*$"
    },
    "environment": {
      "properties": {
        "api_key": {
          "type": "string",
          "markdownDescription": "The API key for your Honeybadger project."
        },
        "env": {
          "type": "string",
          "markdownDescription": "The environment the app is running in. In Rails this defaults to `Rails.env`."
        },
        "report_data": {
          "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
          "markdownDescription": "Enable/disable reporting of data. Defaults to false for `test`, `development`, and `cucumber` environments."
        },
        "root": {
          "type": "string",
          "markdownDescription": "The project's absolute root path."
        },
        "revision": {
          "type": "string",
          "markdownDescription": "The project's git revision."
        },
        "hostname": {
          "type": "string",
          "markdownDescription": "The hostname of the current box."
        },
        "backend": {
          "type": "string",
          "markdownDescription": "An alternate backend to use for reporting data."
        },
        "debug": {
          "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
          "markdownDescription": "Enables verbose debug logging."
        },
        "send_data_at_exit": {
          "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
          "markdownDescription": "Prevent the Ruby program from exiting until all queued notices have been delivered to Honeybadger. (This can take a while in some cases; see `max_queue_size`.)"
        },
        "max_queue_size": {
          "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
          "markdownDescription": "Maximum number of notices to queue for delivery at one time; new notices will be dropped if this number is exceeded."
        },
        "logging": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "level": {
              "anyOf": [
                { "$ref": "#/definitions/erb" },
                { "enum": ["INFO", "WARN", "DEBUG"] }
              ],
              "markdownDescription": "The log level. Does nothing unless `logging.path` is also set."
            },
            "tty_level": {
              "anyOf": [
                { "enum": ["INFO", "WARN", "DEBUG"] },
                { "$ref": "#/definitions/erb" }
              ],
              "markdownDescription": "Level to log when attached to a terminal (anything < `logging.level` will always be ignored)."
            }
          },
          "additionalProperties": false,
          "required": ["path"]
        },
        "connection": {
          "type": "object",
          "properties": {
            "secure": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Use SSL when sending data.",
              "default": true
            },
            "host": {
              "type": "string",
              "markdownDescription": "The host to use when sending data.",
              "default": "api.honeybadger.io"
            },
            "port": {
              "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "The port to use when sending data.",
              "default": 443
            },
            "http_open_timeout": {
              "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "The HTTP open timeout (in seconds) when connecting to the server.",
              "default": 2
            },
            "http_read_timeout": {
              "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "The HTTP read timeout (in seconds) when connecting to the server.",
              "default": 5
            },
            "proxy_host": {
              "type": "string",
              "markdownDescription": "The proxy host to use when sending data."
            },
            "proxy_port": {
              "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "The proxy port to use when sending data."
            },
            "proxy_user": {
              "type": "string",
              "markdownDescription": "The proxy user to use when sending data."
            },
            "proxy_pass": {
              "type": "string",
              "markdownDescription": "The proxy password to use when sending data."
            }
          }
        },
        "request": {
          "type": "object",
          "properties": {
            "filter_keys": {
              "markdownDescription": " A list of keys to filter when sending request data. In Rails, this also includes existing params filters.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              },
              "default": ["password", "password_confirmation"]
            },
            "disable_session": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Prevent session from being sent with request data.",
              "default": false
            },
            "disable_params": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Prevent params from being sent with request data.",
              "default": false
            },
            "disable_environment": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Prevent Rack environment from being sent with request data.",
              "default": false
            },
            "disable_url": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Prevent url from being sent with request data (Rack environment may still contain it in some cases).",
              "default": false
            }
          }
        },
        "user_informer": {
          "type": "object",
          "properties": {
            "enabled": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable the UserInformer middleware. The user informer displays information about a Honeybadger error to your end-users when you display a 500 error page. This typically includes the error id which can be used to reference the error inside your Honeybadger account. [Learn more](https://docs.honeybadger.io/lib/ruby/getting-started/collecting-user-feedback/)",
              "default": true
            },
            "info": {
              "type": "string",
              "markdownDescription": "Replacement string for HTML comment in templates."
            }
          }
        },
        "feedback": {
          "type": "object",
          "properties": {
            "enabled": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable the UserFeedback middleware. Feedback displays a comment form to your-end user when they encounter an error. When the user creates a comment, it is added to the error in Honeybadger, and a notification is sent. [Learn More](https://docs.honeybadger.io/lib/ruby/getting-started/collecting-user-feedback/)",
              "default": true
            }
          }
        },
        "exceptions": {
          "type": "object",
          "properties": {
            "enabled": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable error reporting functionality.",
              "default": true
            },
            "ignore": {
              "markdownDescription": "A list of exception class names to ignore (appends to defaults).",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "anyOf": [
                  { "$ref": "#/definitions/constant" },
                  { "$ref": "#/definitions/erb" }
                ]
              }
            },
            "ignore_only": {
              "markdownDescription": "A list of exception class names to ignore (overrides defaults).",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "anyOf": [
                  { "$ref": "#/definitions/constant" },
                  { "$ref": "#/definitions/erb" }
                ]
              }
            },
            "ignored_user_agents": {
              "markdownDescription": "A list of user agents to ignore.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "rescue_rake": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable rescuing exceptions in rake tasks. Default: `true` when run in background; `false` when run in terminal."
            },
            "notify_at_exit": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Report unhandled exception when Ruby crashes (at_exit).",
              "default": true
            },
            "source_radius": {
              "anyOf": [{ "type": "integer" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "The number of lines before and after the source when reporting snippets.",
              "default": 2
            },
            "local_variables": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable sending local variables. Requires the [binding_of_caller](https://rubygems.org/gems/binding_of_caller) gem.",
              "default": false
            },
            "unwrap": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Reports #original_exception or #cause one level up from rescued exception when available.",
              "default": false
            }
          }
        },
        "breadcrumbs": {
          "type": "object",
          "properties": {
            "enabled": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable breadcrumb functionality.",
              "default": true
            },
            "active_support_notifications": {
              "markdownDescription": "Configuration for automatic Active Support Instrumentation events.",
              "type": "object"
            },
            "logging": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable/Disable automatic breadcrumbs from log messages.",
                  "default": true
                }
              }
            }
          }
        },
        "active_job": {
          "type": "object",
          "properties": {
            "attempt_threshold": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                { "$ref": "#/definitions/erb" }
              ],
              "markdownDescription": "The number of attempts before notifications will be sent."
            },
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for this plugin.",
                  "default": true
                }
              }
            }
          }
        },
        "sidekiq": {
          "type": "object",
          "properties": {
            "attempt_threshold": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                { "$ref": "#/definitions/erb" }
              ],
              "markdownDescription": "The number of attempts before notifications will be sent.",
              "type": "integer"
            },
            "use_component": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Automatically set the component to the class of the job. Helps with grouping.",
              "default": true
            },
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for Sidekiq.",
                  "default": true
                },
                "collection_interval": {
                  "anyOf": [
                    { "type": "integer", "minimum": 0 },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "The frequency, in seconds, in which Sidekiq metrics are sampled.",
                  "default": 60
                },
                "cluster_collection": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable cluster wide metric collection. If you are using Sidekiq Enterprise, this is configured automatically."
                },
                "events": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Sidekiq events to Insights."
                },
                "metrics": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Sidekiq metrics to Insights."
                }
              }
            }
          }
        },
        "solid_queue": {
          "type": "object",
          "properties": {
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for SolidQueue.",
                  "default": true
                },
                "collection_interval": {
                  "anyOf": [
                    { "type": "integer" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "The frequency, in seconds, in which SolidQueue metrics are sampled.",
                  "default": 60
                },
                "cluster_collection": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable cluster wide metric collection.",
                  "default": true
                }
              }
            }
          }
        },
        "delayed_job": {
          "type": "object",
          "properties": {
            "attempt_threshold": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                { "$ref": "#/definitions/erb" }
              ],
              "markdownDescription": "The number of attempts before notifications will be sent.",
              "default": 0
            }
          }
        },
        "shoryuken": {
          "type": "object",
          "properties": {
            "attempt_threshold": {
              "anyOf": [
                { "type": "integer", "minimum": 0 },
                { "$ref": "#/definitions/erb" }
              ],
              "markdownDescription": "The number of attempts before notifications will be sent.",
              "default": 0
            }
          }
        },
        "sinatra": {
          "type": "object",
          "properties": {
            "enabled": {
              "anyOf": [{ "type": "boolean" }, { "$ref": "#/definitions/erb" }],
              "markdownDescription": "Enable Sinatra auto-initialization.",
              "default": true
            }
          }
        },
        "rails": {
          "type": "object",
          "properties": {
            "subscriber_ignore_sources": {
              "markdownDescription": "sources (strings or regexes) that should be ignored when using the Rails error reporter.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for Rails.",
                  "default": true
                },
                "events": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Rails events to Insights.",
                  "default": true
                },
                "metrics": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Rails metrics to Insights.",
                  "default": false
                }
              }
            }
          }
        },
        "autotuner": {
          "type": "object",
          "properties": {
            "insignts": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights data collection for Autotuner.",
                  "default": true
                }
              }
            }
          }
        },
        "karafka": {
          "type": "object",
          "properties": {
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for Karafka.",
                  "default": true
                },
                "events": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Karafka events to Insights.",
                  "default": true
                },
                "metrics": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending Karafka metrics to Insights.",
                  "default": false
                }
              }
            }
          }
        },
        "net_http": {
          "type": "object",
          "properties": {
            "insights": {
              "type": "object",
              "properties": {
                "enabled": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable automatic Insights instrumentation for `Net::HTTP`.",
                  "default": true
                },
                "full_url": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Log the request URL instead of just the domain.",
                  "default": false
                },
                "events": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending `Net::HTTP` events to Insights.",
                  "default": true
                },
                "metrics": {
                  "anyOf": [
                    { "type": "boolean" },
                    { "$ref": "#/definitions/erb" }
                  ],
                  "markdownDescription": "Enable sending `Net::HTTP` metrics to Insights.",
                  "default": false
                }
              }
            }
          }
        }
      }
    }
  },
  "properties": {
    "production": { "$ref": "#/definitions/environment" },
    "development": { "$ref": "#/definitions/environment" }
  },
  "$ref": "#/definitions/environment",
  "additionalProperties": {
    "$ref": "#/definitions/environment",
    "additionalProperties": false
  }
}
