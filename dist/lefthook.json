{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "$id": "https://www.rubyschema.org/lefthook.json",
  "title": "Lefthook configuration",
  "definitions": {
    "hook": {
      "properties": {
        "files": {
          "type": "string",
          "markdownDescription": "A custom git command for files to be referenced in {files} template.",
          "examples": ["git diff --name-only master"]
        },
        "parallel": {
          "type": "boolean",
          "markdownDescription": "Run commands and scripts concurrently.",
          "default": false
        },
        "piped": {
          "type": "boolean",
          "markdownDescription": "Stop running commands and scripts if one of them fail.",
          "default": false
        },
        "follow": {
          "type": "boolean",
          "markdownDescription": "Follow the STDOUT of the running commands and scripts.",
          "default": false
        },
        "exclude_tags": {
          "anyOf": [
            { "type": "string" },
            {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          ],
          "markdownDescription": "Tags or command names that you want to exclude. This option can be overwritten with `LEFTHOOK_EXCLUDE` env variable."
        },
        "skip": { "$ref": "#/definitions/skip" },
        "only": { "$ref": "#/definitions/only" },
        "jobs": {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/job" }
        },
        "commands": {
          "type": "object",
          "propertyNames": { "type": "string" },
          "additionalProperties": { "$ref": "#/definitions/command" }
        },
        "scripts": {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/script" }
        }
      },
      "additionalProperties": false
    },
    "condition": {
      "oneOf": [
        {
          "enum": ["rebase", "merge", "merge-commit"]
        },
        {
          "type": "object",
          "properties": {
            "ref": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": ["ref"]
        },
        {
          "type": "object",
          "properties": {
            "run": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": ["run"]
        }
      ]
    },
    "job": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "markdownDescription": "Name of a job. Will be printed in summary. If specified, the jobs can be merged with a jobs of the same name in a local config or extends."
        },
        "run": {
          "type": "string"
        },
        "script": {
          "type": "string"
        },
        "runner": {
          "type": "string"
        },
        "group": {
          "type": "object",
          "properties": {
            "parallel": {
              "type": "boolean"
            },
            "piped": {
              "type": "boolean"
            },
            "jobs": {
              "type": "array",
              "uniqueItems": true,
              "items": { "$ref": "#/definitions/job" }
            }
          }
        },
        "skip": {
          "$ref": "#/definitions/skip"
        },
        "only": {
          "$ref": "#/definitions/only"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "glob": {
          "$ref": "#/definitions/glob"
        },
        "files": {
          "$ref": "#/definitions/files"
        },
        "file_types": {
          "$ref": "#/definitions/file_types"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "root": {
          "type": "string"
        },
        "exclude": {
          "$ref": "#/definitions/exclude"
        },
        "fail_text": {
          "type": "string"
        },
        "stage_fixed": {
          "type": "boolean",
          "default": false
        },
        "interactive": {
          "type": "boolean",
          "default": false
        },
        "use_stdin": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "command": {
      "type": "object",
      "properties": {
        "run": {
          "type": "string"
        },
        "skip": {
          "$ref": "#/definitions/skip"
        },
        "only": {
          "$ref": "#/definitions/only"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "glob": {
          "$ref": "#/definitions/glob"
        },
        "files": {
          "$ref": "#/definitions/files"
        },
        "file_types": {
          "$ref": "#/definitions/file_types"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "root": {
          "type": "string"
        },
        "exclude": {
          "$ref": "#/definitions/exclude"
        },
        "fail_text": {
          "type": "string"
        },
        "stage_fixed": {
          "type": "boolean",
          "default": false
        },
        "interactive": {
          "type": "boolean",
          "default": false
        },
        "use_stdin": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "markdownDescription": "This option makes sense only when parallel: false or piped: true is set.\n\nValue 0 is considered an +Infinity, so commands or scripts with priority: 0 or without this setting will be run at the very end.",
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "required": ["run"]
    },
    "script": {
      "type": "object",
      "properties": {
        "runner": {
          "type": "string"
        },
        "skip": {
          "$ref": "#/definitions/condition"
        },
        "only": {
          "$ref": "#/definitions/condition"
        },
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "fail_text": {
          "type": "string"
        },
        "stage_fixed": {
          "type": "boolean",
          "default": false
        },
        "interactive": {
          "type": "boolean",
          "default": false
        },
        "use_stdin": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "markdownDescription": "This option makes sense only when parallel: false or piped: true is set.\n\nValue 0 is considered an +Infinity, so commands or scripts with priority: 0 or without this setting will be run at the very end.",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "env": {
      "type": "object",
      "propertyNames": { "type": "string" },
      "additionalProperties": { "type": "string" }
    },
    "tags": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "glob": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "files": {
      "type": "string",
      "markdownDescription": "A custom git command for files or directories to be referenced in {files} template for run setting.",
      "examples": ["git diff --name-only master"]
    },
    "file_type": {
      "enum": [
        "text",
        "binary",
        "executable",
        "not executable",
        "symlink",
        "not symlink"
      ]
    },
    "file_types": {
      "oneOf": [
        {
          "$ref": "#/definitions/file_type"
        },
        {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/file_type"
          }
        }
      ]
    },
    "exclude": {
      "type": "array",
      "markdownDescription": "A list of globs to be excluded.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "skip": {
      "anyOf": [
        { "$ref": "#/definitions/condition" },
        {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/condition" }
        }
      ],
      "markdownDescription": "You can skip all or specific commands and scripts using the `skip` option. You can also skip when merging, rebasing, or being on a specific branch. Globs are available for branches."
    },
    "only": {
      "anyOf": [
        { "$ref": "#/definitions/condition" },
        {
          "type": "array",
          "uniqueItems": true,
          "items": { "$ref": "#/definitions/condition" }
        }
      ],
      "markdownDescription": "You can force a command, script, or the whole hook to execute only in certain conditions. This option acts like the opposite of `skip`. It accepts the same values but skips execution only if the condition is _not_ satisfied."
    }
  },
  "properties": {
    "assert_lefthook_installed": {
      "type": "boolean",
      "markdownDescription": "When set to `true`, fail (with exit status 1) if lefthook executable can't be found in $PATH, under node_modules/, as a Ruby gem, or other supported method. This makes sure git hook won't omit lefthook rules if lefthook ever was installed.",
      "default": false
    },
    "colors": {
      "anyOf": [
        { "const": "auto" },
        { "const": false },
        {
          "type": "object",
          "propertyNames": { "type": "string" },
          "additionalProperties": {
            "anyOf": [
              { "type": "integer" },
              {
                "type": "string",
                "pattern": "^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$"
              }
            ]
          }
        }
      ]
    },
    "extends": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "lefthook": {
      "type": "string",
      "markdownDescription": "Provide a full path to lefthook executable or a command to run lefthook. Bourne shell (`sh`) syntax is supported."
    },
    "min_version": {
      "type": "string",
      "pattern": "^\\d+(\\.\\d+){1,2}$"
    },
    "no_tty": {
      "type": "boolean",
      "markdownDescription": "Whether hide spinner and other interactive things."
    },
    "output": {
      "enum": [
        "meta",
        "summary",
        "success",
        "failure",
        "execution",
        "execution_out",
        "execution_info",
        "skips"
      ]
    },
    "rc": {
      "type": "string"
    },
    "remotes": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "properties": {
          "git_url": {
            "type": "string",
            "markdownDescription": "A URL to Git repository. It will be accessed with privileges of the machine lefthook runs on."
          },
          "ref": {
            "type": "string",
            "markdownDescription": "An optional branch or tag name."
          },
          "refetch": {
            "type": "boolean",
            "markdownDescription": "Force remote config refetching on every run. Lefthook will be refetching the specified remote every time it is called.",
            "default": false
          },
          "refetch_frequency": {
            "type": "string",
            "markdownDescription": "Specifies how frequently Lefthook should refetch the remote configuration. This can be set to always, never or a time duration like 24h, 30m, etc.",
            "anyOf": [
              { "enum": ["always", "never"] },
              { "pattern": "^\\d+[hm]" }
            ]
          },
          "configs": {
            "type": "array",
            "markdownDescription": "An optional array of config paths from remote's root.",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "source_dir": {
      "type": "string",
      "markdownDescription": "Change a directory for script files. Directory for script files contains folders with git hook names which contain script files.\n\n[Docs](https://lefthook.dev/configuration/source_dir.html)",
      "default": ".lefthook/"
    },
    "source_dir_local": {
      "type": "string",
      "markdownDescription": "Change a directory for _local_ script files (not stored in VCS).",
      "default": ".lefthook-local/"
    },
    "skip_lfs": {
      "type": "boolean",
      "markdownDescription": "Skip running LFS hooks even if it exists on your system.",
      "default": false
    },
    "templates": {
      "type": "array",
      "markdownDescription": "Provide custom replacement for templates in run values.",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "minItems": 1,
        "maxItems": 1,
        "propertyNames": { "type": "string" },
        "additionalProperties": { "type": "string" }
      }
    },
    "pre-commit": {
      "$ref": "#/definitions/hook"
    },
    "pre-push": {
      "$ref": "#/definitions/hook"
    }
  },
  "additionalProperties": {
    "$ref": "#/definitions/hook"
  }
}
