{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://www.rubyschema.org/rubocop.json",
  "title": "Rubocop Configuration",
  "definitions": {
    "cop": {
      "properties": {
        "Enabled": { "type": "boolean" },
        "Include": {
          "type": "array",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "Exclude": {
          "type": "array",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "Severity": {
          "enum": [
            "info",
            "refactor",
            "convention",
            "warning",
            "error",
            "fatal"
          ]
        },
        "Details": {
          "type": "string"
        },
        "AutoCorrect": {
          "enum": ["always", "contextual", "disabled"]
        },
        "StyleGuide": {
          "type": "string"
        },
        "VersionAdded": { "type": "string", "pattern": "^\\d+\\.\\d+$" },
        "VersionChanged": { "type": "string", "pattern": "^\\d+\\.\\d+$" }
      }
    },
    "department": {
      "properties": {
        "Enabled": { "type": "boolean" },
        "StyleGuideBaseURL": {
          "type": "string",
          "format": "uri"
        },
        "DocumentationBaseURL": {
          "type": "string",
          "format": "uri"
        },
        "DocumentationExtension": {
          "anyOf": [{ "type": "string" }, { "enum": [".md", "", ".txt"] }]
        }
      }
    },
    "constant": {
      "type": "string",
      "pattern": "^(?:::)?[A-Z][a-zA-Z0-9_]*(?:::[A-Z][a-zA-Z0-9_]*)*$"
    },
    "constants": {
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/definitions/constant" }
    }
  },
  "properties": {
    "inherit_gem": {
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          { "type": "string" },
          {
            "type": "array",
            "items": { "type": "string" },
            "uniqueItems": true
          }
        ]
      }
    },
    "inherit_from": {
      "anyOf": [
        { "type": "string" },
        {
          "type": "array",
          "uniqueItems": true,
          "items": { "type": "string" }
        }
      ]
    },
    "inherit_mode": {
      "type": "object",
      "properties": {
        "merge": {
          "type": "array",
          "uniqueItems": true,
          "items": { "enum": ["Exclude", "Include"] }
        }
      }
    },
    "AllCops": {
      "type": "object",
      "properties": {
        "Exclude": {
          "description": "A list of globs for file paths that should be excluded.",
          "type": "array",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "Include": {
          "description": "A list of globs for file paths that should be included.",
          "type": "array",
          "uniqueItems": true,
          "items": { "type": "string" }
        },
        "DisabledByDefault": {
          "type": "boolean"
        },
        "EnabledByDefault": {
          "type": "boolean"
        },
        "TargetRubyVersion": {
          "anyOf": [
            { "type": "number" },
            { "enum": [2.7, 3.0, 3.1, 3.2, 3.3, 3.4] }
          ]
        },
        "ParserEngine": {
          "enum": ["parser_whitequark", "parser_prism"]
        },
        "StyleGuideBaseURL": {
          "type": "string",
          "format": "uri"
        },
        "DocumentationBaseURL": {
          "type": "string",
          "format": "uri"
        },
        "DocumentationExtension": {
          "anyOf": [{ "type": "string" }, { "enum": [".md", "", ".txt"] }]
        },
        "ActiveSupportExtensionsEnabled": {
          "type": "boolean"
        },
        "StringLiteralsFrozenByDefault": {
          "markdownDescription": "Set this to `true` if you enable frozen string literals globally with the `RUBYOPT` environment variable.",
          "type": "boolean"
        }
      },
      "not": {
        "allOf": [
          { "required": ["DisabledByDefault"] },
          { "required": ["EnabledByDefault"] }
        ]
      }
    },
    "Bundler": { "$ref": "#/definitions/department" },
    "Gemspec": { "$ref": "#/definitions/department" },
    "Layout": { "$ref": "#/definitions/department" },
    "Lint": { "$ref": "#/definitions/department" },
    "Metrics": { "$ref": "#/definitions/department" },
    "Migration": { "$ref": "#/definitions/department" },
    "Naming": { "$ref": "#/definitions/department" },
    "Security": { "$ref": "#/definitions/department" },
    "Style": { "$ref": "#/definitions/department" },
    "Bundler/DuplicatedGem": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlerduplicatedgem)",
      "$ref": "#/definitions/cop"
    },
    "Bundler/DuplicatedGroup": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlerduplicatedgroup)",
      "$ref": "#/definitions/cop"
    },
    "Bundler/GemComment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlergemcomment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "OnlyFor": {
              "type": "array",
              "items": {
                "anyOf": [
                  { "type": "string" },
                  {
                    "enum": [
                      "version_specifiers",
                      "restrictive_version_specifiers",
                      "bitbucket",
                      "gist",
                      "git",
                      "github",
                      "source"
                    ]
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "Bundler/GemFilename": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlergemfilename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["Gemfile", "gems.rb"]
            }
          }
        }
      ]
    },
    "Bundler/GemVersion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlergemversion)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["required", "forbidden"]
            },
            "AllowedGems": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Bundler/InsecureProtocolSource": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlerinsecureprotocolsource)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowHttpProtocol": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Bundler/OrderedGems": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_bundler#bundlerorderedgems)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "TreatCommentsAsGroupSeparators": { "type": "boolean" },
            "ConsiderPunctuation": { "type": "boolean" }
          }
        }
      ]
    },
    "Gemspec/AddRuntimeDependency": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecaddruntimedependency)",
      "$ref": "#/definitions/cop"
    },
    "Gemspec/DependencyVersion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecdependencyversion)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["required", "forbidden"]
            }
          }
        }
      ]
    },
    "Gemspec/DeprecatedAttributeAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecdeprecatedattributeassignment)",
      "$ref": "#/definitions/cop"
    },
    "Gemspec/DevelopmentDependencies": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecdevelopmentdependencies)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["Gemfile", "gems.rb", "gemspec"]
            }
          }
        }
      ]
    },
    "Gemspec/DuplicatedAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecduplicatedassignment)",
      "$ref": "#/definitions/cop"
    },
    "Gemspec/OrderedDependencies": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecordereddependencies)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "TreatCommentsAsGroupSeparators": { "type": "boolean" },
            "ConsiderPunctuation": { "type": "boolean" }
          }
        }
      ]
    },
    "Gemspec/RequireMFA": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecrequiremfa)",
      "$ref": "#/definitions/cop"
    },
    "Gemspec/RequiredRubyVersion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecrequiredrubyversion)",
      "$ref": "#/definitions/cop"
    },
    "Gemspec/RubyVersionGlobalsUsage": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_gemspec#gemspecrubyversionglobalsusage)",
      "$ref": "#/definitions/cop"
    },
    "Layout/AccessModifierIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutaccessmodifierindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["indent", "outdent"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/ArgumentAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutargumentalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["with_first_argument", "with_fixed_indentation"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/ArrayAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutarrayalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["with_first_element", "with_fixed_indentation"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/AssignmentIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutassignmentindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/BeginEndAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutbeginendalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleAlignWith": {
              "enum": ["start_of_line", "begin"]
            }
          }
        }
      ]
    },
    "Layout/BlockAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutblockalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleAlignWith": {
              "enum": ["either", "start_of_block", "start_of_line"]
            }
          }
        }
      ]
    },
    "Layout/BlockEndNewline": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutblockendnewline)",
      "$ref": "#/definitions/cop"
    },
    "Layout/CaseIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutcaseindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["case", "end"]
            },
            "IndentOneStep": { "type": "boolean" },
            "IndentationWidth": { "type": ["integer", "null"] }
          }
        }
      ]
    },
    "Layout/ClassStructure": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutclassstructure)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "ExpectedOrder": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "enum": [
                  "module_inclusion",
                  "constants",
                  "association",
                  "public_attribute_macros",
                  "public_delegate",
                  "macros",
                  "public_class_methods",
                  "initializer",
                  "public_methods",
                  "protected_attribute_macros",
                  "protected_methods",
                  "private_attribute_macros",
                  "private_delegate",
                  "private_methods"
                ]
              }
            },
            "Categories": {
              "type": "object",
              "properties": {
                "association": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "anyOf": [
                      { "type": "string" },
                      {
                        "enum": [
                          "belongs_to",
                          "has_one",
                          "has_many",
                          "has_and_belongs_to_many"
                        ]
                      }
                    ]
                  }
                },
                "attribute_macros": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "anyOf": [
                      { "type": "string" },
                      {
                        "enum": ["attr_accessor", "attr_reader", "attr_writer"]
                      }
                    ]
                  }
                },
                "macros": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "anyOf": [
                      { "type": "string" },
                      {
                        "enum": ["validates", "validate"]
                      }
                    ]
                  }
                },
                "module_inclusion": {
                  "type": "array",
                  "uniqueItems": true,
                  "items": {
                    "anyOf": [
                      { "type": "string" },
                      {
                        "enum": ["include", "prepend", "extend"]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Layout/ClosingHeredocIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutclosingheredocindentation)",
      "$ref": "#/definitions/cop"
    },
    "Layout/ClosingParenthesisIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutclosingparenthesisindentation)",
      "$ref": "#/definitions/cop"
    },
    "Layout/CommentIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutcommentindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowForAlignment": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/ConditionPosition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutconditionposition)",
      "$ref": "#/definitions/cop"
    },
    "Layout/DefEndAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutdefendalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleAlignWith": { "enum": ["start_of_line", "def"] }
          }
        }
      ]
    },
    "Layout/DotPosition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutdotposition)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": { "enum": ["leading", "trailing"] }
          }
        }
      ]
    },
    "Layout/ElseAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutelsealignment)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyComment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptycomment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowBorderComment": { "type": "boolean" },
            "AllowMarginComment": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/EmptyLineAfterGuardClause": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylineafterguardclause)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLineAfterMagicComment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylineaftermagiccomment)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLineAfterMultilineCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylineaftermultilinecondition)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLineBetweenDefs": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinebetweendefs)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EmptyLineBetweenMethodDefs": { "type": "boolean" },
            "EmptyLineBetweenClassDefs": { "type": "boolean" },
            "EmptyLineBetweenModuleDefs": { "type": "boolean" },
            "DefLikeMacros": {
              "type": "array",
              "items": { "type": "string" },
              "uniqueItems": true
            },
            "AllowAdjacentOneLineDefs": { "type": "boolean" },
            "NumberOfEmptyLines": { "type": "integer" }
          }
        }
      ]
    },
    "Layout/EmptyLines": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylines)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLinesAroundAccessModifier": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundaccessmodifier)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["around", "only_before"]
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundArguments": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundarguments)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLinesAroundAttributeAccessor": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundattributeaccessor)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowAliasSyntax": { "type": "boolean" },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundBeginBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundbeginbody)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLinesAroundBlockBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundblockbody)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": { "enum": ["empty_lines", "no_empty_lines"] }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundClassBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundclassbody)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": [
                "empty_lines",
                "empty_lines_except_namespace",
                "empty_lines_special",
                "no_empty_lines",
                "beginning_only",
                "ending_only"
              ]
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundExceptionHandlingKeywords": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundexceptionhandlingkeywords)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLinesAroundMethodBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundmethodbody)",
      "$ref": "#/definitions/cop"
    },
    "Layout/EmptyLinesAroundModuleBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutemptylinesaroundmodulebody)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": [
                "empty_lines",
                "empty_lines_except_namespace",
                "empty_lines_special",
                "no_empty_lines"
              ]
            }
          }
        }
      ]
    },
    "Layout/EndAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutendalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleAlignWith": {
              "enum": ["keyword", "variable", "start_of_line"]
            }
          }
        }
      ]
    },
    "Layout/EndOfLine": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutendofline)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["native", "lf", "crlf"]
            }
          }
        }
      ]
    },
    "Layout/ExtraSpacing": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutextraspacing)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowForAlignment": { "type": "boolean" },
            "AllowBeforeTrailingComments": { "type": "boolean" },
            "ForceEqualSignAlignment": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/FirstArgumentIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstargumentindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": [
                "consistent",
                "consistent_relative_to_receiver",
                "special_for_inner_method_call",
                "special_for_inner_method_call_in_parentheses"
              ]
            },
            "IndentationWidth": { "type": ["integer", "null"] }
          }
        }
      ]
    },
    "Layout/FirstArrayElementIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstarrayelementindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": [
                "special_inside_parentheses",
                "consistent",
                "align_brackets"
              ]
            },
            "IndentationWidth": { "type": ["integer", "null"] }
          }
        }
      ]
    },
    "Layout/FirstArrayElementLineBreak": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstarrayelementlinebreak)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/FirstHashElementIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirsthashelementindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": [
                "special_inside_parentheses",
                "consistent",
                "align_braces"
              ]
            },
            "IndentationWidth": { "type": ["integer", "null"] }
          }
        }
      ]
    },
    "Layout/FirstHashElementLineBreak": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirsthashelementlinebreak)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/FirstMethodArgumentLineBreak": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstmethodargumentlinebreak)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Layout/FirstMethodParameterLineBreak": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstmethodparameterlinebreak)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/FirstParameterIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutfirstparameterindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["consistent", "align_parentheses"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/HashAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layouthashalignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedHashRocketStyle": {
              "enum": ["key", "separator", "table"]
            },
            "EnforcedColonStyle": { "enum": ["key", "separator", "table"] },
            "EnforcedLastArgumentHashStyle": {
              "enum": [
                "always_inspect",
                "always_ignore",
                "ignore_implicit",
                "ignore_explicit"
              ]
            }
          }
        }
      ]
    },
    "Layout/HeredocArgumentClosingParenthesis": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutheredocargumentclosingparenthesis)",
      "$ref": "#/definitions/cop"
    },
    "Layout/HeredocIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutheredocindentation)",
      "$ref": "#/definitions/cop"
    },
    "Layout/IndentationConsistency": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutindentationconsistency)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["normal", "indented_internal_methods"]
            }
          }
        }
      ]
    },
    "Layout/IndentationStyle": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutindentationstyle)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["spaces", "tabs"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/IndentationWidth": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutindentationwidth)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Width": { "type": "integer" },
            "AllowedPatterns": {
              "type": "array",
              "description": "Allowed regular expression patterns",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Layout/InitialIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutinitialindentation)",
      "$ref": "#/definitions/cop"
    },
    "Layout/LeadingCommentSpace": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutleadingcommentspace)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowDoxygenCommentStyle": { "type": "boolean" },
            "AllowGemfileRubyComment": { "type": "boolean" },
            "AllowRBSInlineAnnotation": { "type": "boolean" },
            "AllowSteepAnnotation": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/LeadingEmptyLines": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutleadingemptylines)",
      "$ref": "#/definitions/cop"
    },
    "Layout/LineContinuationLeadingSpace": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutlinecontinuationleadingspace)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["leading", "trailing"]
            }
          }
        }
      ]
    },
    "Layout/LineContinuationSpacing": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutlinecontinuationspacing)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/LineEndStringConcatenationIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutlineendstringconcatenationindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["aligned", "indented"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/LineLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutlinelength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Max": { "type": "integer" },
            "AllowHeredoc": { "type": "boolean" },
            "AllowURI": { "type": "boolean" },
            "URISchemes": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "IgnoreCopDirectives": { "type": "boolean" },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "SplitStrings": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/MultilineArrayBraceLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinearraybracelayout)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["symmetrical", "new_line", "same_line"]
            }
          }
        }
      ]
    },
    "Layout/MultilineArrayLineBreaks": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinearraylinebreaks)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/MultilineAssignmentLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilineassignmentlayout)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["same_line", "new_line"]
            }
          }
        }
      ]
    },
    "Layout/MultilineBlockLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilineblocklayout)",
      "$ref": "#/definitions/cop"
    },
    "Layout/MultilineHashBraceLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinehashbracelayout)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["symmetrical", "new_line", "same_line"]
            }
          }
        }
      ]
    },
    "Layout/MultilineHashKeyLineBreaks": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinehashkeylinebreaks)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/MultilineMethodArgumentLineBreaks": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinemethodargumentlinebreaks)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/MultilineMethodCallBraceLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinemethodcallbracelayout)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["symmetrical", "new_line", "same_line"]
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodCallIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinemethodcallindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["aligned", "indented", "indented_relative_to_receiver"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodDefinitionBraceLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinemethoddefinitionbracelayout)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["symmetrical", "new_line", "same_line"]
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodParameterLineBreaks": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutmultilinemethodparameterlinebreaks)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowMultilineFinalElement": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/MultilineOperationIndentation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layout/multilineoperationindentation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["aligned", "indented"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/ParameterAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutparameteralignment)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["with_first_parameter", "with_fixed_indentation"]
            },
            "IndentationWidth": {
              "type": ["integer", "null"]
            }
          }
        }
      ]
    },
    "Layout/RedundantLineBreak": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutredundantlinebreak)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "InspectBlocks": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/RescueEnsureAlignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutrescueensurealignment)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SingleLineBlockChain": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutsinglelineblockchain)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAfterColon": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceaftercolon)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAfterComma": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceaftercomma)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAfterMethodName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceaftermethodname)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAfterNot": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceafternot)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAfterSemicolon": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceaftersemicolon)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAroundBlockParameters": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacearoundblockparameters)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleInsidePipes": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundEqualsInParameterDefault": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacearoundequalsinparameterdefault)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundKeyword": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacearoundkeyword)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAroundMethodCallOperator": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacearoundmethodcalloperator)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceAroundOperators": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacearoundoperators)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowForAlignment": { "type": "boolean" },
            "EnforcedStyleForExponentOperator": {
              "enum": ["space", "no_space"]
            },
            "EnforcedStyleForRationalLiterals": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeBlockBraces": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforeblockbraces)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": { "enum": ["space", "no_space"] },
            "EnforcedStyleForEmptyBraces": { "enum": ["space", "no_space"] }
          }
        }
      ]
    },
    "Layout/SpaceBeforeBrackets": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforebrackets)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceBeforeComma": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforecomma)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceBeforeComment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforecomment)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceBeforeFirstArg": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforefirstarg)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowForAlignment": { "type": "boolean" }
          }
        }
      ]
    },
    "Layout/SpaceBeforeSemicolon": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspacebeforesemicolon)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceInLambdaLiteral": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinlambdaliteral)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["require_no_space", "require_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideArrayLiteralBrackets": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidearrayliteralbrackets)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space", "compact"]
            },
            "EnforcedStyleForEmptyBrackets": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideArrayPercentLiteral": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidearraypercentliteral)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceInsideBlockBraces": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsideblockbraces)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space"]
            },
            "EnforcedStyleForEmptyBraces": {
              "enum": ["space", "no_space"]
            },
            "SpaceBeforeBlockParameters": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideHashLiteralBraces": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidehashliteralbraces)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space", "compact"]
            },
            "EnforcedStyleForEmptyBraces": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideParens": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsideparens)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space", "compact"]
            }
          }
        }
      ]
    },
    "Layout/SpaceInsidePercentLiteralDelimiters": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidepercentliteraldelimiters)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceInsideRangeLiteral": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsiderangeliteral)",
      "$ref": "#/definitions/cop"
    },
    "Layout/SpaceInsideReferenceBrackets": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidereferencebrackets)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space"]
            },
            "EnforcedStyleForEmptyBrackets": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideStringInterpolation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layoutspaceinsidestringinterpolation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["space", "no_space"]
            }
          }
        }
      ]
    },
    "Layout/TrailingEmptyLines": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layouttrailingemptylines)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["final_newline", "final_blank_line"]
            }
          }
        }
      ]
    },
    "Layout/TrailingWhitespace": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_layout#layouttrailingwhitespace)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowInHeredoc": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousassignment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/AmbiguousBlockAssociation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousblockassociation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/AmbiguousOperator": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousoperator)",
      "$ref": "#/definitions/cop"
    },
    "Lint/AmbiguousOperatorPrecedence": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousoperatorprecedence)",
      "$ref": "#/definitions/cop"
    },
    "Lint/AmbiguousRange": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousrange)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "RequireParenthesesForMethodChains": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousRegexpLiteral": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintambiguousregexpliteral)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ArrayLiteralInRegexp": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintarrayliteralinregexp)",
      "$ref": "#/definitions/cop"
    },
    "Lint/AssignmentInCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintassignmentincondition)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowSafeAssignment": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/BigDecimalNew": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintbigdecimalnew)",
      "$ref": "#/definitions/cop"
    },
    "Lint/BinaryOperatorWithIdenticalOperands": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintbinaryoperatorwithidenticaloperands)",
      "$ref": "#/definitions/cop"
    },
    "Lint/BooleanSymbol": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintbooleansymbol)",
      "$ref": "#/definitions/cop"
    },
    "Lint/CircularArgumentReference": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintcircularargumentreference)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ConstantDefinitionInBlock": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintconstantdefinitioninblock)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/ConstantOverwrittenInRescue": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintconstantoverwritteninrescue)",
      "$ref": "#/definitions/cop"
    },
    "Lint/onstantReassignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintonstantreassignment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ConstantResolution": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintconstantresolution)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Only": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "Ignore": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/CopDirectiveSyntax": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintcopdirectivesyntax)",
      "$ref": "#/definitions/cop"
    },
    "Lint/Debugger": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintdebugger)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "DebuggerMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "DebuggerRequires": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/DeprecatedClassMethods": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintdeprecatedclassmethods)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DeprecatedConstants": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintdeprecatedconstants)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "DeprecatedConstants": {
              "type": "object",
              "propertyNames": {
                "$ref": "#/definitions/constant"
              },
              "additionalProperties": {
                "properties": {
                  "Alternative": { "type": "string" },
                  "DeprecatedVersion": {
                    "type": "string",
                    "pattern": "^\\d+\\.\\d+(\\.\\d+)?$"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        }
      ]
    },
    "Lint/DeprecatedOpenSSLConstant": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintdeprecatedopensslconstant)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DisjunctiveAssignmentInConstructor": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintdisjunctiveassignmentinconstructor)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateBranch": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatebranch)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "IgnoreLiteralBranches": { "type": "boolean" },
            "IgnoreConstantBranches": { "type": "boolean" },
            "IgnoreDuplicateElseBranch": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/DuplicateCaseCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatecasecondition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateElsifCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicateelsifcondition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateHashKey": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatehashkey)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateMagicComment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatemagiccomment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateMatchPattern": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatematchpattern)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateMethods": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatemethods)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateRegexpCharacterClassElement": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicateregexpcharacterclasselement)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateRequire": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicaterequire)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateRescueException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicaterescueexception)",
      "$ref": "#/definitions/cop"
    },
    "Lint/DuplicateSetElement": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintduplicatesetelement)",
      "$ref": "#/definitions/cop"
    },
    "Lint/EachWithObjectArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linteachwithobjectargument)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ElseLayout": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintelselayout)",
      "$ref": "#/definitions/cop"
    },
    "Lint/EmptyBlock": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyblock)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" },
            "AllowEmptyLambdas": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EmptyClass": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyclass)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EmptyConditionalBody": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyconditionalbody)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EmptyEnsure": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyensure)",
      "$ref": "#/definitions/cop"
    },
    "Lint/EmptyExpression": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyexpression)",
      "$ref": "#/definitions/cop"
    },
    "Lint/EmptyFile": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyfile)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EmptyInPattern": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyinpattern)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EmptyInterpolation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptyinterpolation)",
      "$ref": "#/definitions/cop"
    },
    "Lint/EmptyWhen": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintemptywhen)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": { "type": "boolean" }
          }
        }
      ]
    },
    "Lint/EnsureReturn": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintensurereturn)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ErbNewArguments": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linterbnewarguments)",
      "$ref": "#/definitions/cop"
    },
    "Lint/FlipFlop": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintflipflop)",
      "$ref": "#/definitions/cop"
    },
    "Lint/FloatComparison": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintfloatcomparison)",
      "$ref": "#/definitions/cop"
    },
    "Lint/FloatOutOfRange": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintfloatoutofrange)",
      "$ref": "#/definitions/cop"
    },
    "Lint/FormatParameterMismatch": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintformatparametermismatch)",
      "$ref": "#/definitions/cop"
    },
    "Lint/HashCompareByIdentity": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linthashcomparebyidentity)",
      "$ref": "#/definitions/cop"
    },
    "Lint/HashNewWithKeywordArgumentsAsDefault": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linthashnewwithkeywordargumentsasdefault)",
      "$ref": "#/definitions/cop"
    },
    "Lint/HeredocMethodCallPosition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintheredocmethodcallposition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/IdentityComparison": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintidentitycomparison)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ImplicitStringConcatenation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintimplicitstringconcatenation)",
      "$ref": "#/definitions/cop"
    },
    "Lint/IncompatibleIoSelectWithFiberScheduler": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintincompatibleioselectwithfiberscheduler)",
      "$ref": "#/definitions/cop"
    },
    "Lint/IneffectiveAccessModifier": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintineffectiveaccessmodifier)",
      "$ref": "#/definitions/cop"
    },
    "Lint/InheritException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintinheritexception)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["standard_error", "runtime_error"]
            }
          }
        }
      ]
    },
    "Lint/InterpolationCheck": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintinterpolationcheck)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ItWithoutArgumentsInBlock": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintitwithoutargumentsinblock)",
      "$ref": "#/definitions/cop"
    },
    "Lint/LambdaWithoutLiteralBlock": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintlambdawithoutliteralblock)",
      "$ref": "#/definitions/cop"
    },
    "Lint/LiteralAsCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintliteralascondition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/LiteralAssignmentInCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintliteralassignmentincondition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/LiteralInInterpolation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintliteralininterpolation)",
      "$ref": "#/definitions/cop"
    },
    "Lint/Loop": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintloop)",
      "$ref": "#/definitions/cop"
    },
    "Lint/MissingCopEnableDirective": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintmissingcopenabledirective)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "MaximumRangeSize": { "type": "number" }
          }
        }
      ]
    },
    "Lint/MissingSuper": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintmissingsuper)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedParentClasses": {
              "$ref": "#/definitions/constants"
            }
          }
        }
      ]
    },
    "Lint/MixedCaseRange": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintmixedcaserange)",
      "$ref": "#/definitions/cop"
    },
    "Lint/MixedRegexpCaptureTypes": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintmixedregexpcapturetypes)",
      "$ref": "#/definitions/cop"
    },
    "Lint/MultipleComparison": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintmultiplecomparison)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NestedMethodDefinition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnestedmethoddefinition)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/NestedPercentLiteral": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnestedpercentliteral)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NextWithoutAccumulator": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnextwithoutaccumulator)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NoReturnInBeginEndBlocks": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnoreturninbeginendblocks)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NonAtomicFileOperation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnonatomicfileoperation)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NonDeterministicRequireOrder": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnondeterministicrequireorder)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NonLocalExitFromIterator": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnonlocalexitfromiterator)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NumberConversion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnumberconversion)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "IgnoredClasses": {
              "$ref": "#/definitions/constants"
            }
          }
        }
      ]
    },
    "Lint/NumberedParameterAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnumberedparameterassignment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/NumericOperationWithConstantResult": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintnumericoperationwithconstantresult)",
      "$ref": "#/definitions/cop"
    },
    "Lint/OrAssignmentToConstant": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintorassignmenttoconstant)",
      "$ref": "#/definitions/cop"
    },
    "Lint/OrderedMagicComments": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintorderedmagiccomments)",
      "$ref": "#/definitions/cop"
    },
    "Lint/OutOfRangeRegexpRef": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintoutofrangeregexpref)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ParenthesesAsGroupedExpression": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintparenthesesasgroupedexpression)",
      "$ref": "#/definitions/cop"
    },
    "Lint/PercentStringArray": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintpercentstringarray)",
      "$ref": "#/definitions/cop"
    },
    "Lint/PercentSymbolArray": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintpercentsymbolarray)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RaiseException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintraiseexception)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedImplicitNamespaces": {
              "$ref": "#/definitions/constants"
            }
          }
        }
      ]
    },
    "Lint/RandOne": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrandone)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantCopDisableDirective": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantcopdisabledirective)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantCopEnableDirective": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantcopenabledirective)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantDirGlobSort": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantdirglobsort)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantRegexpQuantifiers": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantregexpquantifiers)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantRequireStatement": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantrequirestatement)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantSafeNavigation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantsafenavigation)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Lint/RedundantSplatExpansion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantsplatexpansion)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowPercentLiteralArrayArgument": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantStringCoercion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantstringcoercion)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantTypeConversion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundanttypeconversion)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantWithIndex": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantwithindex)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RedundantWithObject": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintredundantwithobject)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RefinementImportMethods": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrefinementimportmethods)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RegexpAsCondition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintregexpascondition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RequireParentheses": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrequireparentheses)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RequireRangeParentheses": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrequirerangeparentheses)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RequireRelativeSelfPath": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrequirerelativeselfpath)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RescueException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrescueexception)",
      "$ref": "#/definitions/cop"
    },
    "Lint/RescueType": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintrescuetype)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ReturnInVoidContext": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintreturninvoidcontext)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SafeNavigationChain": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsafenavigationchain)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/SafeNavigationConsistency": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsafenavigationconsistency)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Lint/SafeNavigationWithEmpty": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsafenavigationwithempty)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ScriptPermission": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintscriptpermission)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SelfAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintselfassignment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SendWithMixinArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsendwithmixinargument)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ShadowedArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintshadowedargument)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "IgnoreImplicitReferences": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ShadowedException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintshadowedexception)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ShadowingOuterLocalVariable": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintshadowingouterlocalvariable)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SharedMutableDefault": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsharedmutabledefault)",
      "$ref": "#/definitions/cop"
    },
    "Lint/StructNewOverride": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintstructnewoverride)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SuppressedException": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsuppressedexception)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowComments": {
              "type": "boolean"
            },
            "AllowNil": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/SuppressedExceptionInNumberConversion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsuppressedexceptioninnumberconversion)",
      "$ref": "#/definitions/cop"
    },
    "Lint/SymbolConversion": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsymbolconversion)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["strict", "consistent"]
            }
          }
        }
      ]
    },
    "Lint/Syntax": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintsyntax)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ToEnumArguments": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linttoenumarguments)",
      "$ref": "#/definitions/cop"
    },
    "Lint/ToJSON": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linttojson)",
      "$ref": "#/definitions/cop"
    },
    "Lint/TopLevelReturnWithArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linttoplevelreturnwithargument)",
      "$ref": "#/definitions/cop"
    },
    "Lint/TrailingCommaInAttributeDeclaration": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linttrailingcommainattributedeclaration)",
      "$ref": "#/definitions/cop"
    },
    "Lint/TripleQuotes": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linttriplequotes)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UnderscorePrefixedVariableName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunderscoreprefixedvariablename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowKeywordBlockArguments": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UnescapedBracketInRegexp": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunescapedbracketinregexp)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UnexpectedBlockArity": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunexpectedblockarity)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Methods": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "minimum": 0
              }
            }
          }
        }
      ]
    },
    "Lint/UnifiedInteger": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunifiedinteger)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UnmodifiedReduceAccumulator": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunmodifiedreduceaccumulator)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UnreachableCode": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunreachablecode)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UnreachableLoop": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunreachableloop)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Lint/UnusedBlockArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunusedblockargument)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "IgnoreEmptyBlocks": {
              "type": "boolean"
            },
            "AllowUnusedKeywordArguments": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UnusedMethodArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintunusedmethodargument)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowUnusedKeywordArguments": {
              "type": "boolean"
            },
            "IgnoreEmptyMethods": {
              "type": "boolean"
            },
            "IgnoreNotImplementedMethods": {
              "type": "boolean"
            },
            "NotImplementedExceptions": {
              "$ref": "#/definitions/constants"
            }
          }
        }
      ]
    },
    "Lint/UriEscapeUnescape": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linturiescapeunescape)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UriRegexp": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#linturiregexp)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessAccessModifier": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessaccessmodifier)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "ContextCreatingMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "MethodCreatingMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Lint/UselessAssignment": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessassignment)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessConstantScoping": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessconstantscoping)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessDefaultValueArgument": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessdefaultvalueargument)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedReceivers": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Lint/UselessDefined": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessdefined)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessElseWithoutRescue": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselesselsewithoutrescue)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessMethodDefinition": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessmethoddefinition)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessNumericOperation": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessnumericoperation)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessOr": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessor)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessRescue": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselessrescue)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessRuby2Keywords": {
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessSetterCall": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselesssettercall)",
      "$ref": "#/definitions/cop"
    },
    "Lint/UselessTimes": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintuselesstimes)",
      "$ref": "#/definitions/cop"
    },
    "Lint/Void": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_lint#lintvoid)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CheckForMethodsWithNoSideEffects": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Metrics/AbcSize": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsabcsize)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "CountRepeatedAttributes": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Metrics/BlockLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsblocklength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CountComments": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            },
            "CountAsOne": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Metrics/BlockNesting": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsblocknesting)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CountBlocks": {
              "type": "boolean"
            },
            "CountModifierForms": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Metrics/ClassLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsclasslength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CountComments": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            },
            "CountAsOne": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Metrics/CollectionLiteralLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricscollectionliterallength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "LengthThreshold": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Metrics/CyclomaticComplexity": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricscyclomaticcomplexity)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Metrics/MethodLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsmethodlength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CountComments": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            },
            "CountAsOne": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Metrics/ModuleLength": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsmodulelength)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CountComments": {
              "type": "boolean"
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            },
            "CountAsOne": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Metrics/ParameterLists": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsparameterlists)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Max": {
              "type": "integer",
              "minimum": 0
            },
            "CountKeywordArgs": {
              "type": "boolean"
            },
            "MaxOptionalParameters": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Metrics/PerceivedComplexity": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_metrics#metricsperceivedcomplexity)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "Max": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      ]
    },
    "Migration/DepartmentName": {
      "$ref": "#/definitions/cop"
    },
    "Naming/AccessorMethodName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingaccessormethodname)",
      "$ref": "#/definitions/cop"
    },
    "Naming/AsciiIdentifiers": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingasciiidentifiers)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AsciiConstants": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/BinaryOperatorParameterName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingbinaryoperatorparametername)",
      "$ref": "#/definitions/cop"
    },
    "Naming/BlockForwarding": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingblockforwarding)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["anonymous", "explicit"]
            },
            "BlockForwardingName": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Naming/BlockParameterName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingblockparametername)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "MinNameLength": {
              "type": "integer",
              "minimum": 0
            },
            "AllowNamesEndingInNumbers": {
              "type": "boolean"
            },
            "AllowedNames": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenNames": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/ClassAndModuleCamelCase": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingclassandmodulecamelcase)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "AllowedNames": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/ConstantName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingconstantname)",
      "$ref": "#/definitions/cop"
    },
    "Naming/FileName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingfilename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "ExpectMatchingDefinition": {
              "type": "boolean"
            },
            "CheckDefinitionPathHierarchy": {
              "type": "boolean"
            },
            "CheckDefinitionPathHierarchyRoots": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "Regex": {
              "type": "string"
            },
            "IgnoreExecutableScripts": {
              "type": "boolean"
            },
            "AllowedAcronyms": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string", "pattern": "^[A-Z0-9]+$" }
            }
          }
        }
      ]
    },
    "Naming/HeredocDelimiterCase": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingheredocdelimitercase)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["lowercase", "uppercase"]
            }
          }
        }
      ]
    },
    "Naming/HeredocDelimiterNaming": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingheredocdelimiternaming)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "ForbiddenDelimiters": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/InclusiveLanguage": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#naminginclusivelanguage)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "CheckIdentifiers": {
              "type": "boolean"
            },
            "CheckConstants": {
              "type": "boolean"
            },
            "CheckVariables": {
              "type": "boolean"
            },
            "CheckStrings": {
              "type": "boolean"
            },
            "CheckSymbols": {
              "type": "boolean"
            },
            "CheckComments": {
              "type": "boolean"
            },
            "CheckFilepaths": {
              "type": "boolean"
            },
            "FlaggedTerms": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "Regex": {
                    "type": "string"
                  },
                  "Suggestions": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": { "type": "string" }
                  },
                  "WholeWord": {
                    "type": "boolean"
                  }
                },
                "required": ["Suggestions"]
              }
            }
          }
        }
      ]
    },
    "Naming/MemoizedInstanceVariableName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingmemoizedinstancevariablename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyleForLeadingUnderscores": {
              "enum": ["disallowed", "required", "optional"]
            }
          }
        }
      ]
    },
    "Naming/MethodName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingmethodname)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["snake_case", "camelCase"]
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenIdentifiers": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/MethodParameterName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingmethodparametername)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "MinNameLength": {
              "type": "integer",
              "minimum": 0
            },
            "AllowNamesEndingInNumbers": {
              "type": "boolean"
            },
            "AllowedNames": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenNames": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/PredicateMethod": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingpredicatemethod)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "Mode": {
              "enum": ["conservative", "aggressive"]
            },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/PredicatePrefix": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingpredicateprefix)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "NamePrefix": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenPrefixes": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedMethods": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "MethodDefinitionMacros": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "UseSorbetSigs": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/RescuedExceptionsVariableName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingrescuedexceptionsvariablename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "PreferredName": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      ]
    },
    "Naming/VariableName": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingvariablename)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["snake_case", "camelCase"]
            },
            "AllowedIdentifiers": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenIdentifiers": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "ForbiddenPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Naming/VariableNumber": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_naming#namingvariablenumber)",
      "allOf": [
        { "$ref": "#/definitions/cop" },
        {
          "properties": {
            "EnforcedStyle": {
              "enum": ["snake_case", "normalcase", "non_integer"]
            },
            "CheckMethodNames": {
              "type": "boolean"
            },
            "CheckSymbols": {
              "type": "boolean"
            },
            "AllowedIdentifiers": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            },
            "AllowedPatterns": {
              "type": "array",
              "uniqueItems": true,
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "Security/CompoundHash": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securitycompoundhash)",
      "$ref": "#/definitions/cop"
    },
    "Security/Eval": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securityeval)",
      "$ref": "#/definitions/cop"
    },
    "Security/IoMethods": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securityiomethods)",
      "$ref": "#/definitions/cop"
    },
    "Security/JSONLoad": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securityjsonload)",
      "$ref": "#/definitions/cop"
    },
    "Security/MarshalLoad": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securitymarshalload)",
      "$ref": "#/definitions/cop"
    },
    "Security/YAMLLoad": {
      "markdownDescription": "[Docs](https://docs.rubocop.org/rubocop/cops_security#securityyamlload)",
      "$ref": "#/definitions/cop"
    }
  },
  "additionalProperties": {
    "anyOf": [
      { "$ref": "#/definitions/cop" },
      { "$ref": "#/definitions/department" }
    ]
  }
}
